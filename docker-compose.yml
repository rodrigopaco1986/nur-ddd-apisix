version: '3.9'
services:
  etcd:
    image: bitnami/etcd:3.5
    container_name: etcd
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
    ports:
      - "2379:2379"
    volumes:
      - etcd_data:/bitnami/etcd
    networks:
      - apisix
  apisix:
    image: apache/apisix:3.12.0-debian
    container_name: apisix
    restart: always
    depends_on:
      - etcd
      - vault
    environment:
      - APISIX_ADMIN_KEY=edd1c9f034335f136f87ad84b625c8f1
      - ETCD_HOST=http://etcd:2379
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
      - VAULT_PREFIX=secret/data/apisix/oauth
    volumes:
      - ./apisix.yaml:/usr/local/apisix/conf/config.yaml:ro
    ports:
      - "9080:9080"   # proxy listen
      - "9180:9180"   # admin API
    networks:
      - apisix
      - shared_services_network

  apisix-dashboard:
    image: apache/apisix-dashboard:3.0.1-alpine
    container_name: apisix-dashboard
    restart: always
    depends_on:
      - apisix
      - etcd
    volumes:
      - ./dashboard.yaml:/usr/local/apisix-dashboard/conf/conf.yaml:ro
    ports:
      - "9000:9000"
    networks:
      - apisix

  vault:
    hostname: vault
    container_name: vault
    image: vault:1.13.3
    environment:
      VAULT_ADDR: http://0.0.0.0:8200
      VAULT_API_ADDR: http://0.0.0.0:8200
    ports:
      - 8200:8200
    volumes:
      - ./volumes/vault/file:/vault/file:rw
      - ./vault/config/config.json:/vault/config/config.json:ro
    cap_add:
      - IPC_LOCK
    entrypoint: vault server -dev -dev-listen-address="0.0.0.0:8200" -dev-root-token-id="root"
    networks:
      - apisix

  vault-init:
    container_name: vault-init
    image: vault:1.13.3
    volumes:
      - ./vault/init/vault-init.sh:/vault-init.sh
      - ./vault/config/app-policy.hcl:/app-policy.hcl
    depends_on:
      - vault
    restart: "no"
    entrypoint: sh -c "/vault-init.sh"
    networks:
      - apisix
  auth-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth-app
    restart: on-failure
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
      - /var/www/html/vendor
    networks:
      - apisix
    depends_on:
      - db
      - apisix
    env_file:
      - .env
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=${DB_CONNECTION}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
    extra_hosts:
      - "myinvoice.local:172.18.0.2"
    healthcheck:
      test: ["CMD", "php", "-r", "echo @fsockopen('localhost', 9000) ? 'Healthy' : 'Unhealthy';"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  webserver:
    image: nginx:latest
    container_name: nginx_server
    restart: on-failure
    ports:
      - "8000:80"
      - "8443:443"
    volumes:
      - .:/var/www/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certs:/etc/nginx/certs 
    networks:
      - apisix
    depends_on:
      - auth-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  db:
    image: mysql:8.0
    container_name: mysql_db
    restart: on-failure
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - apisix
    env_file:
      - .env.docker
    environment:
      MYSQL_DATABASE: auth_app
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: laravel
      MYSQL_PASSWORD: laravel
    command: ["--default-authentication-plugin=mysql_native_password"]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka_internal
      - shared_services_network
  
  kafka:
    image: bitnami/kafka:3.4.0-debian-11-r15
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - kafka_internal
      - shared_services_network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  
  kafka-init:
    container_name: kafka-init
    image: bitnami/kafka:3.4.0-debian-11-r15
    depends_on:
      kafka:
        condition: service_healthy
    # Override the container’s startup to just run your script:
    entrypoint: sh -c "/create_topics.sh"
    # Mount your init script (make sure it’s executable: chmod +x)
    volumes:
      - ./kafka/create_topics.sh:/create_topics.sh:ro
    networks:
      - kafka_internal
      - shared_services_network
    restart: "no"
  
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:9092"
    networks:
      - kafka_internal
      - shared_services_network
    ports:
      - "9001:8080"
  
networks:
  apisix:
    driver: bridge
  kafka_internal:
    driver: bridge
  shared_services_network:
    driver: bridge
    name: shared-services-network

volumes:
  etcd_data:
    driver: local
  laravel_app:
  mysql_data:
